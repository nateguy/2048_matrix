// Generated by CoffeeScript 1.7.1
(function() {
  var addScore, boardFull, displayBox, fillTable, generateTile, getColor, getColumn, getRandomCell, getRow, isLost, isValidMove, isWin, merge, newGame, ppArray, randomIndex, randomValue, removeZeros, score, setColumn, setRow, setScoreZero, shift, winValue, wonGame,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  this.board = [0, 1, 2, 3].map(function(x) {
    return [0, 1, 2, 3].map(function(y) {
      return 0;
    });
  });

  score = 0;

  winValue = 2048;

  wonGame = 0;

  $(function() {
    var initiate;
    newGame();
    initiate = function() {
      generateTile();
      fillTable();
      ppArray(board);
      return console.log('Game lost: ' + isLost());
    };
    $('.action').click(function() {
      $('.msg').fadeOut(1000);
      $('.overlay').css({
        "display": "none"
      });
      $('.msg').css({
        "display": "none"
      });
      if ($('.action').html() === "Restart") {
        return newGame();
      } else {
        return wonGame = 1;
      }
    });
    return $('body').keydown(function(e) {
      var key, keys;
      e.preventDefault();
      key = e.which;
      keys = [37, 38, 39, 40];
      if ($.inArray(key, keys) > -1) {
        e.preventDefault();
      }
      if (isLost() === false) {
        switch (key) {
          case 37:
            if (isValidMove('left') === true) {
              console.log('Key left');
              shift('left');
              return initiate();
            }
            break;
          case 38:
            if (isValidMove('up') === true) {
              console.log('Key up');
              shift('up');
              return initiate();
            }
            break;
          case 39:
            if (isValidMove('right') === true) {
              console.log('Key right');
              shift('right');
              return initiate();
            }
            break;
          case 40:
            if (isValidMove('down') === true) {
              console.log('Key down');
              shift('down');
              return initiate();
            }
        }
      }
    });
  });

  newGame = function() {
    var i, j, _i, _j, _ref, _ref1;
    for (i = _i = 0, _ref = board.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
      for (j = _j = 0, _ref1 = board[i].length - 1; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; j = 0 <= _ref1 ? ++_j : --_j) {
        board[i][j] = 0;
      }
    }
    setScoreZero();
    generateTile();
    fillTable();
    ppArray(board);
    return console.log("Score: " + score);
  };

  ppArray = function(array) {
    var row, _i, _len, _results;
    _results = [];
    for (_i = 0, _len = array.length; _i < _len; _i++) {
      row = array[_i];
      _results.push(console.log(row));
    }
    return _results;
  };

  setScoreZero = function() {
    score = 0;
    wonGame = 0;
    return $('.scoreboard > h2').html("Score: 0");
  };

  addScore = function(x) {
    score = score + x;
    return $('.scoreboard > h2').html("Score: " + score);
  };

  getRandomCell = function() {
    return [randomIndex(4), randomIndex(4)];
  };

  displayBox = function(win) {
    $('.overlay').css({
      "display": "block"
    });
    $('.msg').fadeIn();
    $('.msg').css({
      "display": "block"
    });
    if (win === 1) {
      $('.msg > h2').html("You Won! Score: " + score);
      return $('.msg > button').html("Continue");
    } else {
      $('.msg > h2').html("You Lost!");
      return $('.msg > button').html("Restart");
    }
  };

  isWin = function(x) {
    if (x === winValue && wonGame === 0) {
      wonGame = 1;
      displayBox(1);
      return true;
    }
    return false;
  };

  isValidMove = function(direction) {
    var i, j, temp, _i, _j;
    temp = [];
    for (i = _i = 0; _i <= 3; i = ++_i) {
      switch (direction) {
        case 'up':
          temp = getColumn(i);
          break;
        case 'left':
          temp = getRow(i);
          break;
        case 'right':
          temp = getRow(i).reverse();
          break;
        case 'down':
          temp = getColumn(i).reverse();
      }
      for (j = _j = 3; _j >= 1; j = --_j) {
        if ((temp[j - 1] === temp[j]) && (temp[j - 1] + temp[j]) > 0) {
          return true;
        }
        if ((temp[j - 1] === 0) && (temp[j] > 0)) {
          return true;
        }
      }
    }
    return false;
  };

  isLost = function() {
    if ((isValidMove('up') + isValidMove('down') + isValidMove('right') + isValidMove('left')) === 0) {
      displayBox(0);
      return true;
    }
    return false;
  };

  generateTile = function() {
    var val, x, y, _ref;
    if (!boardFull()) {
      val = randomValue();
      _ref = getRandomCell(), x = _ref[0], y = _ref[1];
      if (board[x][y] === 0) {
        return board[x][y] = val;
      } else {
        return generateTile();
      }
    }
  };

  randomIndex = function(x) {
    return Math.floor(Math.random() * x);
  };

  randomValue = function() {
    var val, values;
    values = [1024, 2, 2, 4];
    return val = values[randomIndex(values.length)];
  };

  removeZeros = function(array, orientation) {
    var n, newArray, _i;
    newArray = [];
    array = array.filter(function(x) {
      return x !== 0;
    });
    if (orientation === 1) {
      array = array.reverse();
    }
    for (n = _i = 0; _i <= 3; n = ++_i) {
      newArray[n] = array[n] || 0;
    }
    if (orientation === 1) {
      newArray = newArray.reverse();
    }
    return newArray;
  };

  shift = function(direction) {
    var i, temp, _i, _results;
    temp = [];
    _results = [];
    for (i = _i = 0; _i <= 3; i = ++_i) {
      switch (direction) {
        case 'up':
          temp = removeZeros(getColumn(i), 0);
          temp = merge(temp);
          _results.push(setColumn(temp, i));
          break;
        case 'left':
          temp = removeZeros(getRow(i), 0);
          temp = merge(temp);
          _results.push(setRow(temp, i));
          break;
        case 'right':
          temp = removeZeros(getRow(i), 1).reverse();
          temp = (merge(temp)).reverse();
          _results.push(setRow(temp, i));
          break;
        case 'down':
          temp = removeZeros(getColumn(i), 1).reverse();
          temp = (merge(temp)).reverse();
          _results.push(setColumn(temp, i));
          break;
        default:
          _results.push(void 0);
      }
    }
    return _results;
  };

  merge = function(temp) {
    var j, _i;
    for (j = _i = 0; _i <= 2; j = ++_i) {
      if (temp[j] === temp[j + 1]) {
        temp[j] = parseInt(temp[j + 1]) * 2;
        addScore(temp[j]);
        isWin(temp[j]);
        temp[j + 1] = 0;
      }
    }
    temp = removeZeros(temp, 0);
    return temp;
  };

  setRow = function(row, rowID) {
    var colID, _i, _results;
    _results = [];
    for (colID = _i = 0; _i <= 3; colID = ++_i) {
      _results.push(board[rowID][colID] = row[colID]);
    }
    return _results;
  };

  setColumn = function(column, colID) {
    var rowID, _i, _results;
    _results = [];
    for (rowID = _i = 0; _i <= 3; rowID = ++_i) {
      _results.push(board[rowID][colID] = column[rowID]);
    }
    return _results;
  };

  getColumn = function(column) {
    return [board[0][column], board[1][column], board[2][column], board[3][column]];
  };

  getRow = function(row) {
    return [board[row][0], board[row][1], board[row][2], board[row][3]];
  };

  boardFull = function() {
    var n, _i;
    for (n = _i = 0; _i <= 3; n = ++_i) {
      if (__indexOf.call(board[n], 0) >= 0) {
        return false;
      }
    }
    return true;
  };

  fillTable = function() {
    var col, i, j, row, _i, _results;
    _results = [];
    for (row = _i = 0; _i <= 3; row = ++_i) {
      _results.push((function() {
        var _j, _results1;
        _results1 = [];
        for (col = _j = 0; _j <= 3; col = ++_j) {
          i = row + 1;
          j = col + 1;
          $("#" + i + "_" + j).css("background-color", getColor(board[row][col]));
          if (board[row][col] > 0) {
            $("#" + i + "_" + j).html("<span><p>" + board[row][col] + "</p></span>");
            _results1.push(console.log("Length of text: " + $("#" + i + "_" + j).width()));
          } else {
            _results1.push($("#" + i + "_" + j).html(''));
          }
        }
        return _results1;
      })());
    }
    return _results;
  };

  getColor = function(value) {
    switch (value) {
      case 0:
        return 'rgb(255,255,255)';
      case 2:
        return 'rgb(200,255,200)';
      case 4:
        return 'rgb(150,255,150)';
      case 8:
        return 'rgb(100,255,100)';
      case 16:
        return 'rgb(50,255,50)';
      case 32:
        return 'rgb(0,255,0)';
      case 64:
        return 'rgb(0,220,0)';
      case 128:
        return 'rgb(0,190,0)';
      case 256:
        return 'rgb(0,160,0)';
      case 1024:
        return 'rgb(0,130,0)';
      default:
        return 'rgb(0,100,0)';
    }
  };

}).call(this);

//# sourceMappingURL=main.map
